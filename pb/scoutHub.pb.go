// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.15.5
// source: pb/scoutHub.proto

package pb

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type Ack struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State bool   `protobuf:"varint,1,opt,name=state,proto3" json:"state,omitempty"`
	Info  string `protobuf:"bytes,2,opt,name=info,proto3" json:"info,omitempty"`
	Op    string `protobuf:"bytes,3,opt,name=op,proto3" json:"op,omitempty"`
}

func (x *Ack) Reset() {
	*x = Ack{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_scoutHub_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ack) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ack) ProtoMessage() {}

func (x *Ack) ProtoReflect() protoreflect.Message {
	mi := &file_pb_scoutHub_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ack.ProtoReflect.Descriptor instead.
func (*Ack) Descriptor() ([]byte, []int) {
	return file_pb_scoutHub_proto_rawDescGZIP(), []int{0}
}

func (x *Ack) GetState() bool {
	if x != nil {
		return x.State
	}
	return false
}

func (x *Ack) GetInfo() string {
	if x != nil {
		return x.Info
	}
	return ""
}

func (x *Ack) GetOp() string {
	if x != nil {
		return x.Op
	}
	return ""
}

type Subscription struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PeerID    string           `protobuf:"bytes,1,opt,name=peerID,proto3" json:"peerID,omitempty"`
	Predicate string           `protobuf:"bytes,2,opt,name=predicate,proto3" json:"predicate,omitempty"`
	RvId      string           `protobuf:"bytes,3,opt,name=rvId,proto3" json:"rvId,omitempty"`
	Shortcut  string           `protobuf:"bytes,4,opt,name=shortcut,proto3" json:"shortcut,omitempty"`
	Backups   map[int32]string `protobuf:"bytes,5,rep,name=backups,proto3" json:"backups,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	SubAddr   string           `protobuf:"bytes,6,opt,name=subAddr,proto3" json:"subAddr,omitempty"`
	IntAddr   string           `protobuf:"bytes,7,opt,name=intAddr,proto3" json:"intAddr,omitempty"`
}

func (x *Subscription) Reset() {
	*x = Subscription{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_scoutHub_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Subscription) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Subscription) ProtoMessage() {}

func (x *Subscription) ProtoReflect() protoreflect.Message {
	mi := &file_pb_scoutHub_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Subscription.ProtoReflect.Descriptor instead.
func (*Subscription) Descriptor() ([]byte, []int) {
	return file_pb_scoutHub_proto_rawDescGZIP(), []int{1}
}

func (x *Subscription) GetPeerID() string {
	if x != nil {
		return x.PeerID
	}
	return ""
}

func (x *Subscription) GetPredicate() string {
	if x != nil {
		return x.Predicate
	}
	return ""
}

func (x *Subscription) GetRvId() string {
	if x != nil {
		return x.RvId
	}
	return ""
}

func (x *Subscription) GetShortcut() string {
	if x != nil {
		return x.Shortcut
	}
	return ""
}

func (x *Subscription) GetBackups() map[int32]string {
	if x != nil {
		return x.Backups
	}
	return nil
}

func (x *Subscription) GetSubAddr() string {
	if x != nil {
		return x.SubAddr
	}
	return ""
}

func (x *Subscription) GetIntAddr() string {
	if x != nil {
		return x.IntAddr
	}
	return ""
}

type Event struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventID       *EventID `protobuf:"bytes,1,opt,name=eventID,proto3" json:"eventID,omitempty"`
	Predicate     string   `protobuf:"bytes,2,opt,name=predicate,proto3" json:"predicate,omitempty"`
	RvId          string   `protobuf:"bytes,3,opt,name=rvId,proto3" json:"rvId,omitempty"`
	Event         string   `protobuf:"bytes,4,opt,name=event,proto3" json:"event,omitempty"`
	LastHop       string   `protobuf:"bytes,5,opt,name=lastHop,proto3" json:"lastHop,omitempty"`
	AckAddr       string   `protobuf:"bytes,6,opt,name=ackAddr,proto3" json:"ackAddr,omitempty"`
	Backup        bool     `protobuf:"varint,7,opt,name=backup,proto3" json:"backup,omitempty"`
	OriginalRoute string   `protobuf:"bytes,8,opt,name=originalRoute,proto3" json:"originalRoute,omitempty"`
	BirthTime     string   `protobuf:"bytes,9,opt,name=birthTime,proto3" json:"birthTime,omitempty"`
	PubAddr       string   `protobuf:"bytes,10,opt,name=pubAddr,proto3" json:"pubAddr,omitempty"`
}

func (x *Event) Reset() {
	*x = Event{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_scoutHub_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Event) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Event) ProtoMessage() {}

func (x *Event) ProtoReflect() protoreflect.Message {
	mi := &file_pb_scoutHub_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Event.ProtoReflect.Descriptor instead.
func (*Event) Descriptor() ([]byte, []int) {
	return file_pb_scoutHub_proto_rawDescGZIP(), []int{2}
}

func (x *Event) GetEventID() *EventID {
	if x != nil {
		return x.EventID
	}
	return nil
}

func (x *Event) GetPredicate() string {
	if x != nil {
		return x.Predicate
	}
	return ""
}

func (x *Event) GetRvId() string {
	if x != nil {
		return x.RvId
	}
	return ""
}

func (x *Event) GetEvent() string {
	if x != nil {
		return x.Event
	}
	return ""
}

func (x *Event) GetLastHop() string {
	if x != nil {
		return x.LastHop
	}
	return ""
}

func (x *Event) GetAckAddr() string {
	if x != nil {
		return x.AckAddr
	}
	return ""
}

func (x *Event) GetBackup() bool {
	if x != nil {
		return x.Backup
	}
	return false
}

func (x *Event) GetOriginalRoute() string {
	if x != nil {
		return x.OriginalRoute
	}
	return ""
}

func (x *Event) GetBirthTime() string {
	if x != nil {
		return x.BirthTime
	}
	return ""
}

func (x *Event) GetPubAddr() string {
	if x != nil {
		return x.PubAddr
	}
	return ""
}

type EventID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PublisherID   string `protobuf:"bytes,1,opt,name=publisherID,proto3" json:"publisherID,omitempty"`
	SessionNumber int32  `protobuf:"varint,2,opt,name=sessionNumber,proto3" json:"sessionNumber,omitempty"`
	SeqID         int32  `protobuf:"varint,3,opt,name=seqID,proto3" json:"seqID,omitempty"`
}

func (x *EventID) Reset() {
	*x = EventID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_scoutHub_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventID) ProtoMessage() {}

func (x *EventID) ProtoReflect() protoreflect.Message {
	mi := &file_pb_scoutHub_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventID.ProtoReflect.Descriptor instead.
func (*EventID) Descriptor() ([]byte, []int) {
	return file_pb_scoutHub_proto_rawDescGZIP(), []int{3}
}

func (x *EventID) GetPublisherID() string {
	if x != nil {
		return x.PublisherID
	}
	return ""
}

func (x *EventID) GetSessionNumber() int32 {
	if x != nil {
		return x.SessionNumber
	}
	return 0
}

func (x *EventID) GetSeqID() int32 {
	if x != nil {
		return x.SeqID
	}
	return 0
}

type Update struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sender    string           `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	Route     string           `protobuf:"bytes,2,opt,name=route,proto3" json:"route,omitempty"`
	RouteAddr string           `protobuf:"bytes,3,opt,name=routeAddr,proto3" json:"routeAddr,omitempty"`
	Predicate string           `protobuf:"bytes,4,opt,name=predicate,proto3" json:"predicate,omitempty"`
	Backups   map[int32]string `protobuf:"bytes,5,rep,name=backups,proto3" json:"backups,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Update) Reset() {
	*x = Update{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_scoutHub_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Update) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Update) ProtoMessage() {}

func (x *Update) ProtoReflect() protoreflect.Message {
	mi := &file_pb_scoutHub_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Update.ProtoReflect.Descriptor instead.
func (*Update) Descriptor() ([]byte, []int) {
	return file_pb_scoutHub_proto_rawDescGZIP(), []int{4}
}

func (x *Update) GetSender() string {
	if x != nil {
		return x.Sender
	}
	return ""
}

func (x *Update) GetRoute() string {
	if x != nil {
		return x.Route
	}
	return ""
}

func (x *Update) GetRouteAddr() string {
	if x != nil {
		return x.RouteAddr
	}
	return ""
}

func (x *Update) GetPredicate() string {
	if x != nil {
		return x.Predicate
	}
	return ""
}

func (x *Update) GetBackups() map[int32]string {
	if x != nil {
		return x.Backups
	}
	return nil
}

type RecruitTrackerMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Leader bool   `protobuf:"varint,1,opt,name=leader,proto3" json:"leader,omitempty"`
	RvID   string `protobuf:"bytes,2,opt,name=rvID,proto3" json:"rvID,omitempty"`
	RvAddr string `protobuf:"bytes,3,opt,name=rvAddr,proto3" json:"rvAddr,omitempty"`
}

func (x *RecruitTrackerMessage) Reset() {
	*x = RecruitTrackerMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_scoutHub_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecruitTrackerMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecruitTrackerMessage) ProtoMessage() {}

func (x *RecruitTrackerMessage) ProtoReflect() protoreflect.Message {
	mi := &file_pb_scoutHub_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecruitTrackerMessage.ProtoReflect.Descriptor instead.
func (*RecruitTrackerMessage) Descriptor() ([]byte, []int) {
	return file_pb_scoutHub_proto_rawDescGZIP(), []int{5}
}

func (x *RecruitTrackerMessage) GetLeader() bool {
	if x != nil {
		return x.Leader
	}
	return false
}

func (x *RecruitTrackerMessage) GetRvID() string {
	if x != nil {
		return x.RvID
	}
	return ""
}

func (x *RecruitTrackerMessage) GetRvAddr() string {
	if x != nil {
		return x.RvAddr
	}
	return ""
}

type EventLog struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RvID           string                 `protobuf:"bytes,1,opt,name=rvID,proto3" json:"rvID,omitempty"`
	EventID        *EventID               `protobuf:"bytes,2,opt,name=eventID,proto3" json:"eventID,omitempty"`
	Event          *Event                 `protobuf:"bytes,3,opt,name=event,proto3" json:"event,omitempty"`
	Log            map[string]bool        `protobuf:"bytes,4,rep,name=log,proto3" json:"log,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	RecruitMessage *RecruitTrackerMessage `protobuf:"bytes,5,opt,name=recruitMessage,proto3" json:"recruitMessage,omitempty"`
}

func (x *EventLog) Reset() {
	*x = EventLog{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_scoutHub_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventLog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventLog) ProtoMessage() {}

func (x *EventLog) ProtoReflect() protoreflect.Message {
	mi := &file_pb_scoutHub_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventLog.ProtoReflect.Descriptor instead.
func (*EventLog) Descriptor() ([]byte, []int) {
	return file_pb_scoutHub_proto_rawDescGZIP(), []int{6}
}

func (x *EventLog) GetRvID() string {
	if x != nil {
		return x.RvID
	}
	return ""
}

func (x *EventLog) GetEventID() *EventID {
	if x != nil {
		return x.EventID
	}
	return nil
}

func (x *EventLog) GetEvent() *Event {
	if x != nil {
		return x.Event
	}
	return nil
}

func (x *EventLog) GetLog() map[string]bool {
	if x != nil {
		return x.Log
	}
	return nil
}

func (x *EventLog) GetRecruitMessage() *RecruitTrackerMessage {
	if x != nil {
		return x.RecruitMessage
	}
	return nil
}

type RefreshTracker struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Logs map[string]*EventLog `protobuf:"bytes,1,rep,name=logs,proto3" json:"logs,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *RefreshTracker) Reset() {
	*x = RefreshTracker{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_scoutHub_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RefreshTracker) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RefreshTracker) ProtoMessage() {}

func (x *RefreshTracker) ProtoReflect() protoreflect.Message {
	mi := &file_pb_scoutHub_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RefreshTracker.ProtoReflect.Descriptor instead.
func (*RefreshTracker) Descriptor() ([]byte, []int) {
	return file_pb_scoutHub_proto_rawDescGZIP(), []int{7}
}

func (x *RefreshTracker) GetLogs() map[string]*EventLog {
	if x != nil {
		return x.Logs
	}
	return nil
}

type EventAck struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RvID           string                 `protobuf:"bytes,1,opt,name=rvID,proto3" json:"rvID,omitempty"`
	EventID        *EventID               `protobuf:"bytes,2,opt,name=eventID,proto3" json:"eventID,omitempty"`
	PeerID         string                 `protobuf:"bytes,3,opt,name=peerID,proto3" json:"peerID,omitempty"`
	RecruitMessage *RecruitTrackerMessage `protobuf:"bytes,4,opt,name=recruitMessage,proto3" json:"recruitMessage,omitempty"`
}

func (x *EventAck) Reset() {
	*x = EventAck{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_scoutHub_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventAck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventAck) ProtoMessage() {}

func (x *EventAck) ProtoReflect() protoreflect.Message {
	mi := &file_pb_scoutHub_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventAck.ProtoReflect.Descriptor instead.
func (*EventAck) Descriptor() ([]byte, []int) {
	return file_pb_scoutHub_proto_rawDescGZIP(), []int{8}
}

func (x *EventAck) GetRvID() string {
	if x != nil {
		return x.RvID
	}
	return ""
}

func (x *EventAck) GetEventID() *EventID {
	if x != nil {
		return x.EventID
	}
	return nil
}

func (x *EventAck) GetPeerID() string {
	if x != nil {
		return x.PeerID
	}
	return ""
}

func (x *EventAck) GetRecruitMessage() *RecruitTrackerMessage {
	if x != nil {
		return x.RecruitMessage
	}
	return nil
}

type AdvertRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupID *MulticastGroupID `protobuf:"bytes,1,opt,name=groupID,proto3" json:"groupID,omitempty"`
	RvId    string            `protobuf:"bytes,2,opt,name=rvId,proto3" json:"rvId,omitempty"`
}

func (x *AdvertRequest) Reset() {
	*x = AdvertRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_scoutHub_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdvertRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdvertRequest) ProtoMessage() {}

func (x *AdvertRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pb_scoutHub_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdvertRequest.ProtoReflect.Descriptor instead.
func (*AdvertRequest) Descriptor() ([]byte, []int) {
	return file_pb_scoutHub_proto_rawDescGZIP(), []int{9}
}

func (x *AdvertRequest) GetGroupID() *MulticastGroupID {
	if x != nil {
		return x.GroupID
	}
	return nil
}

func (x *AdvertRequest) GetRvId() string {
	if x != nil {
		return x.RvId
	}
	return ""
}

type SearchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Predicate string `protobuf:"bytes,1,opt,name=predicate,proto3" json:"predicate,omitempty"`
	RvID      string `protobuf:"bytes,2,opt,name=rvID,proto3" json:"rvID,omitempty"`
}

func (x *SearchRequest) Reset() {
	*x = SearchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_scoutHub_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchRequest) ProtoMessage() {}

func (x *SearchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pb_scoutHub_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchRequest.ProtoReflect.Descriptor instead.
func (*SearchRequest) Descriptor() ([]byte, []int) {
	return file_pb_scoutHub_proto_rawDescGZIP(), []int{10}
}

func (x *SearchRequest) GetPredicate() string {
	if x != nil {
		return x.Predicate
	}
	return ""
}

func (x *SearchRequest) GetRvID() string {
	if x != nil {
		return x.RvID
	}
	return ""
}

type SearchReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Groups map[int32]*MulticastGroupID `protobuf:"bytes,1,rep,name=groups,proto3" json:"groups,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *SearchReply) Reset() {
	*x = SearchReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_scoutHub_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchReply) ProtoMessage() {}

func (x *SearchReply) ProtoReflect() protoreflect.Message {
	mi := &file_pb_scoutHub_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchReply.ProtoReflect.Descriptor instead.
func (*SearchReply) Descriptor() ([]byte, []int) {
	return file_pb_scoutHub_proto_rawDescGZIP(), []int{11}
}

func (x *SearchReply) GetGroups() map[int32]*MulticastGroupID {
	if x != nil {
		return x.Groups
	}
	return nil
}

type MulticastGroupID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OwnerAddr string `protobuf:"bytes,1,opt,name=ownerAddr,proto3" json:"ownerAddr,omitempty"`
	Predicate string `protobuf:"bytes,2,opt,name=predicate,proto3" json:"predicate,omitempty"`
}

func (x *MulticastGroupID) Reset() {
	*x = MulticastGroupID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_scoutHub_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MulticastGroupID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MulticastGroupID) ProtoMessage() {}

func (x *MulticastGroupID) ProtoReflect() protoreflect.Message {
	mi := &file_pb_scoutHub_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MulticastGroupID.ProtoReflect.Descriptor instead.
func (*MulticastGroupID) Descriptor() ([]byte, []int) {
	return file_pb_scoutHub_proto_rawDescGZIP(), []int{12}
}

func (x *MulticastGroupID) GetOwnerAddr() string {
	if x != nil {
		return x.OwnerAddr
	}
	return ""
}

func (x *MulticastGroupID) GetPredicate() string {
	if x != nil {
		return x.Predicate
	}
	return ""
}

type PremiumEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupID   *MulticastGroupID `protobuf:"bytes,1,opt,name=groupID,proto3" json:"groupID,omitempty"`
	Event     string            `protobuf:"bytes,2,opt,name=event,proto3" json:"event,omitempty"`
	EventPred string            `protobuf:"bytes,3,opt,name=eventPred,proto3" json:"eventPred,omitempty"`
	BirthTime string            `protobuf:"bytes,4,opt,name=birthTime,proto3" json:"birthTime,omitempty"`
}

func (x *PremiumEvent) Reset() {
	*x = PremiumEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_scoutHub_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PremiumEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PremiumEvent) ProtoMessage() {}

func (x *PremiumEvent) ProtoReflect() protoreflect.Message {
	mi := &file_pb_scoutHub_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PremiumEvent.ProtoReflect.Descriptor instead.
func (*PremiumEvent) Descriptor() ([]byte, []int) {
	return file_pb_scoutHub_proto_rawDescGZIP(), []int{13}
}

func (x *PremiumEvent) GetGroupID() *MulticastGroupID {
	if x != nil {
		return x.GroupID
	}
	return nil
}

func (x *PremiumEvent) GetEvent() string {
	if x != nil {
		return x.Event
	}
	return ""
}

func (x *PremiumEvent) GetEventPred() string {
	if x != nil {
		return x.EventPred
	}
	return ""
}

func (x *PremiumEvent) GetBirthTime() string {
	if x != nil {
		return x.BirthTime
	}
	return ""
}

type PremiumSubscription struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Addr         string `protobuf:"bytes,1,opt,name=addr,proto3" json:"addr,omitempty"`
	Cap          int32  `protobuf:"varint,2,opt,name=cap,proto3" json:"cap,omitempty"`
	Region       string `protobuf:"bytes,3,opt,name=region,proto3" json:"region,omitempty"`
	OwnPredicate string `protobuf:"bytes,4,opt,name=ownPredicate,proto3" json:"ownPredicate,omitempty"`
	PubPredicate string `protobuf:"bytes,5,opt,name=pubPredicate,proto3" json:"pubPredicate,omitempty"`
}

func (x *PremiumSubscription) Reset() {
	*x = PremiumSubscription{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_scoutHub_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PremiumSubscription) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PremiumSubscription) ProtoMessage() {}

func (x *PremiumSubscription) ProtoReflect() protoreflect.Message {
	mi := &file_pb_scoutHub_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PremiumSubscription.ProtoReflect.Descriptor instead.
func (*PremiumSubscription) Descriptor() ([]byte, []int) {
	return file_pb_scoutHub_proto_rawDescGZIP(), []int{14}
}

func (x *PremiumSubscription) GetAddr() string {
	if x != nil {
		return x.Addr
	}
	return ""
}

func (x *PremiumSubscription) GetCap() int32 {
	if x != nil {
		return x.Cap
	}
	return 0
}

func (x *PremiumSubscription) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *PremiumSubscription) GetOwnPredicate() string {
	if x != nil {
		return x.OwnPredicate
	}
	return ""
}

func (x *PremiumSubscription) GetPubPredicate() string {
	if x != nil {
		return x.PubPredicate
	}
	return ""
}

type HelpRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupID *MulticastGroupID         `protobuf:"bytes,1,opt,name=groupID,proto3" json:"groupID,omitempty"`
	Subs    map[int32]*MinimalSubData `protobuf:"bytes,2,rep,name=subs,proto3" json:"subs,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *HelpRequest) Reset() {
	*x = HelpRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_scoutHub_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HelpRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HelpRequest) ProtoMessage() {}

func (x *HelpRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pb_scoutHub_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HelpRequest.ProtoReflect.Descriptor instead.
func (*HelpRequest) Descriptor() ([]byte, []int) {
	return file_pb_scoutHub_proto_rawDescGZIP(), []int{15}
}

func (x *HelpRequest) GetGroupID() *MulticastGroupID {
	if x != nil {
		return x.GroupID
	}
	return nil
}

func (x *HelpRequest) GetSubs() map[int32]*MinimalSubData {
	if x != nil {
		return x.Subs
	}
	return nil
}

type DelegateSub struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupID *MulticastGroupID `protobuf:"bytes,1,opt,name=groupID,proto3" json:"groupID,omitempty"`
	Sub     *MinimalSubData   `protobuf:"bytes,2,opt,name=sub,proto3" json:"sub,omitempty"`
}

func (x *DelegateSub) Reset() {
	*x = DelegateSub{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_scoutHub_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelegateSub) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelegateSub) ProtoMessage() {}

func (x *DelegateSub) ProtoReflect() protoreflect.Message {
	mi := &file_pb_scoutHub_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelegateSub.ProtoReflect.Descriptor instead.
func (*DelegateSub) Descriptor() ([]byte, []int) {
	return file_pb_scoutHub_proto_rawDescGZIP(), []int{16}
}

func (x *DelegateSub) GetGroupID() *MulticastGroupID {
	if x != nil {
		return x.GroupID
	}
	return nil
}

func (x *DelegateSub) GetSub() *MinimalSubData {
	if x != nil {
		return x.Sub
	}
	return nil
}

type MinimalSubData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Predicate string `protobuf:"bytes,1,opt,name=predicate,proto3" json:"predicate,omitempty"`
	Addr      string `protobuf:"bytes,2,opt,name=addr,proto3" json:"addr,omitempty"`
}

func (x *MinimalSubData) Reset() {
	*x = MinimalSubData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_scoutHub_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MinimalSubData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MinimalSubData) ProtoMessage() {}

func (x *MinimalSubData) ProtoReflect() protoreflect.Message {
	mi := &file_pb_scoutHub_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MinimalSubData.ProtoReflect.Descriptor instead.
func (*MinimalSubData) Descriptor() ([]byte, []int) {
	return file_pb_scoutHub_proto_rawDescGZIP(), []int{17}
}

func (x *MinimalSubData) GetPredicate() string {
	if x != nil {
		return x.Predicate
	}
	return ""
}

func (x *MinimalSubData) GetAddr() string {
	if x != nil {
		return x.Addr
	}
	return ""
}

var File_pb_scoutHub_proto protoreflect.FileDescriptor

var file_pb_scoutHub_proto_rawDesc = []byte{
	0x0a, 0x11, 0x70, 0x62, 0x2f, 0x73, 0x63, 0x6f, 0x75, 0x74, 0x48, 0x75, 0x62, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x70, 0x75, 0x62, 0x73,
	0x75, 0x62, 0x2e, 0x70, 0x62, 0x22, 0x3f, 0x0a, 0x03, 0x41, 0x63, 0x6b, 0x12, 0x14, 0x0a, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x6f, 0x70, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x6f, 0x70, 0x22, 0xab, 0x02, 0x0a, 0x0c, 0x53, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x65, 0x65, 0x72, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x65, 0x65, 0x72, 0x49, 0x44, 0x12,
	0x1c, 0x0a, 0x09, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x72, 0x76, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x72, 0x76, 0x49,
	0x64, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x63, 0x75, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x63, 0x75, 0x74, 0x12, 0x45, 0x0a,
	0x07, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b,
	0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x70, 0x75, 0x62, 0x73, 0x75, 0x62, 0x2e, 0x70,
	0x62, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x42,
	0x61, 0x63, 0x6b, 0x75, 0x70, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x62, 0x61, 0x63,
	0x6b, 0x75, 0x70, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x41, 0x64, 0x64, 0x72, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x75, 0x62, 0x41, 0x64, 0x64, 0x72, 0x12, 0x18,
	0x0a, 0x07, 0x69, 0x6e, 0x74, 0x41, 0x64, 0x64, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x69, 0x6e, 0x74, 0x41, 0x64, 0x64, 0x72, 0x1a, 0x3a, 0x0a, 0x0c, 0x42, 0x61, 0x63, 0x6b,
	0x75, 0x70, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0xae, 0x02, 0x0a, 0x05, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x33,
	0x0a, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x70, 0x75, 0x62, 0x73, 0x75, 0x62, 0x2e,
	0x70, 0x62, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x76, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x72, 0x76, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x6c,
	0x61, 0x73, 0x74, 0x48, 0x6f, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6c, 0x61,
	0x73, 0x74, 0x48, 0x6f, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x63, 0x6b, 0x41, 0x64, 0x64, 0x72,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x63, 0x6b, 0x41, 0x64, 0x64, 0x72, 0x12,
	0x16, 0x0a, 0x06, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x06, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x12, 0x24, 0x0a, 0x0d, 0x6f, 0x72, 0x69, 0x67, 0x69,
	0x6e, 0x61, 0x6c, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x12, 0x1c, 0x0a,
	0x09, 0x62, 0x69, 0x72, 0x74, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x62, 0x69, 0x72, 0x74, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70,
	0x75, 0x62, 0x41, 0x64, 0x64, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x75,
	0x62, 0x41, 0x64, 0x64, 0x72, 0x22, 0x67, 0x0a, 0x07, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x44,
	0x12, 0x20, 0x0a, 0x0b, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72,
	0x49, 0x44, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x65, 0x71, 0x49,
	0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x65, 0x71, 0x49, 0x44, 0x22, 0xef,
	0x01, 0x0a, 0x06, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x6e,
	0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x6e, 0x64, 0x65,
	0x72, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x41, 0x64, 0x64, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x41, 0x64, 0x64, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61,
	0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63,
	0x61, 0x74, 0x65, 0x12, 0x3f, 0x0a, 0x07, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x73, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x70, 0x75,
	0x62, 0x73, 0x75, 0x62, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x42,
	0x61, 0x63, 0x6b, 0x75, 0x70, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x62, 0x61, 0x63,
	0x6b, 0x75, 0x70, 0x73, 0x1a, 0x3a, 0x0a, 0x0c, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0x5b, 0x0a, 0x15, 0x52, 0x65, 0x63, 0x72, 0x75, 0x69, 0x74, 0x54, 0x72, 0x61, 0x63, 0x6b,
	0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x6c, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x76, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x72, 0x76, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x76, 0x41, 0x64, 0x64, 0x72, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x76, 0x41, 0x64, 0x64, 0x72, 0x22, 0xc2, 0x02,
	0x0a, 0x08, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4c, 0x6f, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x76,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x72, 0x76, 0x49, 0x44, 0x12, 0x33,
	0x0a, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x70, 0x75, 0x62, 0x73, 0x75, 0x62, 0x2e,
	0x70, 0x62, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x49, 0x44, 0x12, 0x2d, 0x0a, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x70, 0x75, 0x62, 0x73,
	0x75, 0x62, 0x2e, 0x70, 0x62, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x05, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x12, 0x35, 0x0a, 0x03, 0x6c, 0x6f, 0x67, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x23, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x70, 0x75, 0x62, 0x73, 0x75, 0x62, 0x2e,
	0x70, 0x62, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4c, 0x6f, 0x67, 0x2e, 0x4c, 0x6f, 0x67, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x03, 0x6c, 0x6f, 0x67, 0x12, 0x4f, 0x0a, 0x0e, 0x72, 0x65, 0x63,
	0x72, 0x75, 0x69, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x27, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x70, 0x75, 0x62, 0x73, 0x75,
	0x62, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x63, 0x72, 0x75, 0x69, 0x74, 0x54, 0x72, 0x61, 0x63,
	0x6b, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x0e, 0x72, 0x65, 0x63, 0x72,
	0x75, 0x69, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x36, 0x0a, 0x08, 0x4c, 0x6f,
	0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0xa5, 0x01, 0x0a, 0x0e, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x72,
	0x61, 0x63, 0x6b, 0x65, 0x72, 0x12, 0x3e, 0x0a, 0x04, 0x6c, 0x6f, 0x67, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x70, 0x75, 0x62,
	0x73, 0x75, 0x62, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x72,
	0x61, 0x63, 0x6b, 0x65, 0x72, 0x2e, 0x4c, 0x6f, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x04, 0x6c, 0x6f, 0x67, 0x73, 0x1a, 0x53, 0x0a, 0x09, 0x4c, 0x6f, 0x67, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x30, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x70, 0x75, 0x62,
	0x73, 0x75, 0x62, 0x2e, 0x70, 0x62, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4c, 0x6f, 0x67, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xbc, 0x01, 0x0a, 0x08, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x6b, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x76, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x72, 0x76, 0x49, 0x44, 0x12, 0x33, 0x0a, 0x07, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x70, 0x75, 0x62, 0x73, 0x75, 0x62, 0x2e, 0x70, 0x62, 0x2e,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x44,
	0x12, 0x16, 0x0a, 0x06, 0x70, 0x65, 0x65, 0x72, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x70, 0x65, 0x65, 0x72, 0x49, 0x44, 0x12, 0x4f, 0x0a, 0x0e, 0x72, 0x65, 0x63, 0x72,
	0x75, 0x69, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x27, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x70, 0x75, 0x62, 0x73, 0x75, 0x62,
	0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x63, 0x72, 0x75, 0x69, 0x74, 0x54, 0x72, 0x61, 0x63, 0x6b,
	0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x0e, 0x72, 0x65, 0x63, 0x72, 0x75,
	0x69, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x61, 0x0a, 0x0d, 0x41, 0x64, 0x76,
	0x65, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3c, 0x0a, 0x07, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x70, 0x75, 0x62, 0x73, 0x75, 0x62, 0x2e, 0x70, 0x62, 0x2e, 0x4d,
	0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x52,
	0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x76, 0x49, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x72, 0x76, 0x49, 0x64, 0x22, 0x41, 0x0a, 0x0d,
	0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a,
	0x09, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x72,
	0x76, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x72, 0x76, 0x49, 0x44, 0x22,
	0xaf, 0x01, 0x0a, 0x0b, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12,
	0x41, 0x0a, 0x06, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x29, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x70, 0x75, 0x62, 0x73, 0x75, 0x62, 0x2e,
	0x70, 0x62, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x2e, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x73, 0x1a, 0x5d, 0x0a, 0x0b, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x38, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x70, 0x75, 0x62, 0x73,
	0x75, 0x62, 0x2e, 0x70, 0x62, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0x4e, 0x0a, 0x10, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x41, 0x64,
	0x64, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x41,
	0x64, 0x64, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74,
	0x65, 0x22, 0x9e, 0x01, 0x0a, 0x0c, 0x50, 0x72, 0x65, 0x6d, 0x69, 0x75, 0x6d, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x12, 0x3c, 0x0a, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x70, 0x75, 0x62,
	0x73, 0x75, 0x62, 0x2e, 0x70, 0x62, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44,
	0x12, 0x14, 0x0a, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x50,
	0x72, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x50, 0x72, 0x65, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x62, 0x69, 0x72, 0x74, 0x68, 0x54, 0x69, 0x6d,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x69, 0x72, 0x74, 0x68, 0x54, 0x69,
	0x6d, 0x65, 0x22, 0x9b, 0x01, 0x0a, 0x13, 0x50, 0x72, 0x65, 0x6d, 0x69, 0x75, 0x6d, 0x53, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x64,
	0x64, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x61, 0x64, 0x64, 0x72, 0x12, 0x10,
	0x0a, 0x03, 0x63, 0x61, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x63, 0x61, 0x70,
	0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x6f, 0x77, 0x6e, 0x50,
	0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x6f, 0x77, 0x6e, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x12, 0x22, 0x0a, 0x0c,
	0x70, 0x75, 0x62, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x70, 0x75, 0x62, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x22, 0xe3, 0x01, 0x0a, 0x0b, 0x48, 0x65, 0x6c, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x3c, 0x0a, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x70, 0x75, 0x62, 0x73, 0x75,
	0x62, 0x2e, 0x70, 0x62, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x49, 0x44, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x12, 0x3b,
	0x0a, 0x04, 0x73, 0x75, 0x62, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x70, 0x75, 0x62, 0x73, 0x75, 0x62, 0x2e, 0x70, 0x62, 0x2e,
	0x48, 0x65, 0x6c, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x75, 0x62, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x73, 0x75, 0x62, 0x73, 0x1a, 0x59, 0x0a, 0x09, 0x53,
	0x75, 0x62, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x36, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x70, 0x75, 0x62, 0x73, 0x75, 0x62, 0x2e, 0x70, 0x62, 0x2e, 0x4d, 0x69, 0x6e,
	0x69, 0x6d, 0x61, 0x6c, 0x53, 0x75, 0x62, 0x44, 0x61, 0x74, 0x61, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x7f, 0x0a, 0x0b, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61,
	0x74, 0x65, 0x53, 0x75, 0x62, 0x12, 0x3c, 0x0a, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x70, 0x75, 0x62, 0x73, 0x75, 0x62, 0x2e, 0x70, 0x62, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x63,
	0x61, 0x73, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x49, 0x44, 0x12, 0x32, 0x0a, 0x03, 0x73, 0x75, 0x62, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x70, 0x75, 0x62, 0x73, 0x75, 0x62,
	0x2e, 0x70, 0x62, 0x2e, 0x4d, 0x69, 0x6e, 0x69, 0x6d, 0x61, 0x6c, 0x53, 0x75, 0x62, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x03, 0x73, 0x75, 0x62, 0x22, 0x42, 0x0a, 0x0e, 0x4d, 0x69, 0x6e, 0x69, 0x6d,
	0x61, 0x6c, 0x53, 0x75, 0x62, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x65,
	0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72,
	0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x64, 0x64, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x61, 0x64, 0x64, 0x72, 0x32, 0x95, 0x0a, 0x0a, 0x08,
	0x53, 0x63, 0x6f, 0x75, 0x74, 0x48, 0x75, 0x62, 0x12, 0x44, 0x0a, 0x09, 0x53, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x62, 0x65, 0x12, 0x1e, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x70,
	0x75, 0x62, 0x73, 0x75, 0x62, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x15, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x70,
	0x75, 0x62, 0x73, 0x75, 0x62, 0x2e, 0x70, 0x62, 0x2e, 0x41, 0x63, 0x6b, 0x22, 0x00, 0x12, 0x3b,
	0x0a, 0x07, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x12, 0x17, 0x2e, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x70, 0x75, 0x62, 0x73, 0x75, 0x62, 0x2e, 0x70, 0x62, 0x2e, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x1a, 0x15, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x70, 0x75, 0x62, 0x73,
	0x75, 0x62, 0x2e, 0x70, 0x62, 0x2e, 0x41, 0x63, 0x6b, 0x22, 0x00, 0x12, 0x3a, 0x0a, 0x06, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x17, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x70,
	0x75, 0x62, 0x73, 0x75, 0x62, 0x2e, 0x70, 0x62, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x1a, 0x15,
	0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x70, 0x75, 0x62, 0x73, 0x75, 0x62, 0x2e, 0x70,
	0x62, 0x2e, 0x41, 0x63, 0x6b, 0x22, 0x00, 0x12, 0x41, 0x0a, 0x0c, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x12, 0x18, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x70, 0x75, 0x62, 0x73, 0x75, 0x62, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x1a, 0x15, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x70, 0x75, 0x62, 0x73, 0x75,
	0x62, 0x2e, 0x70, 0x62, 0x2e, 0x41, 0x63, 0x6b, 0x22, 0x00, 0x12, 0x44, 0x0a, 0x0d, 0x42, 0x61,
	0x63, 0x6b, 0x75, 0x70, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x12, 0x18, 0x2e, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x70, 0x75, 0x62, 0x73, 0x75, 0x62, 0x2e, 0x70, 0x62, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x1a, 0x15, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x70,
	0x75, 0x62, 0x73, 0x75, 0x62, 0x2e, 0x70, 0x62, 0x2e, 0x41, 0x63, 0x6b, 0x22, 0x00, 0x28, 0x01,
	0x12, 0x43, 0x0a, 0x0c, 0x4c, 0x6f, 0x67, 0x54, 0x6f, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x72,
	0x12, 0x1a, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x70, 0x75, 0x62, 0x73, 0x75, 0x62,
	0x2e, 0x70, 0x62, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4c, 0x6f, 0x67, 0x1a, 0x15, 0x2e, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x70, 0x75, 0x62, 0x73, 0x75, 0x62, 0x2e, 0x70, 0x62, 0x2e,
	0x41, 0x63, 0x6b, 0x22, 0x00, 0x12, 0x43, 0x0a, 0x0c, 0x41, 0x63, 0x6b, 0x54, 0x6f, 0x54, 0x72,
	0x61, 0x63, 0x6b, 0x65, 0x72, 0x12, 0x1a, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x70,
	0x75, 0x62, 0x73, 0x75, 0x62, 0x2e, 0x70, 0x62, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x63,
	0x6b, 0x1a, 0x15, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x70, 0x75, 0x62, 0x73, 0x75,
	0x62, 0x2e, 0x70, 0x62, 0x2e, 0x41, 0x63, 0x6b, 0x22, 0x00, 0x12, 0x52, 0x0a, 0x0e, 0x54, 0x72,
	0x61, 0x63, 0x6b, 0x65, 0x72, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x12, 0x27, 0x2e, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x70, 0x75, 0x62, 0x73, 0x75, 0x62, 0x2e, 0x70, 0x62, 0x2e,
	0x52, 0x65, 0x63, 0x72, 0x75, 0x69, 0x74, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x15, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x70,
	0x75, 0x62, 0x73, 0x75, 0x62, 0x2e, 0x70, 0x62, 0x2e, 0x41, 0x63, 0x6b, 0x22, 0x00, 0x12, 0x3c,
	0x0a, 0x05, 0x41, 0x63, 0x6b, 0x55, 0x70, 0x12, 0x1a, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x70, 0x75, 0x62, 0x73, 0x75, 0x62, 0x2e, 0x70, 0x62, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x41, 0x63, 0x6b, 0x1a, 0x15, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x70, 0x75, 0x62,
	0x73, 0x75, 0x62, 0x2e, 0x70, 0x62, 0x2e, 0x41, 0x63, 0x6b, 0x22, 0x00, 0x12, 0x37, 0x0a, 0x05,
	0x41, 0x63, 0x6b, 0x4f, 0x70, 0x12, 0x15, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x70,
	0x75, 0x62, 0x73, 0x75, 0x62, 0x2e, 0x70, 0x62, 0x2e, 0x41, 0x63, 0x6b, 0x1a, 0x15, 0x2e, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x70, 0x75, 0x62, 0x73, 0x75, 0x62, 0x2e, 0x70, 0x62, 0x2e,
	0x41, 0x63, 0x6b, 0x22, 0x00, 0x12, 0x3d, 0x0a, 0x09, 0x48, 0x65, 0x6c, 0x70, 0x4e, 0x65, 0x77,
	0x52, 0x76, 0x12, 0x17, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x70, 0x75, 0x62, 0x73,
	0x75, 0x62, 0x2e, 0x70, 0x62, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x1a, 0x15, 0x2e, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x70, 0x75, 0x62, 0x73, 0x75, 0x62, 0x2e, 0x70, 0x62, 0x2e, 0x41,
	0x63, 0x6b, 0x22, 0x00, 0x12, 0x4a, 0x0a, 0x0e, 0x41, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73,
	0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x1f, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x70, 0x75, 0x62, 0x73, 0x75, 0x62, 0x2e, 0x70, 0x62, 0x2e, 0x41, 0x64, 0x76, 0x65, 0x72, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x70, 0x75, 0x62, 0x73, 0x75, 0x62, 0x2e, 0x70, 0x62, 0x2e, 0x41, 0x63, 0x6b, 0x22, 0x00,
	0x12, 0x56, 0x0a, 0x12, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x70, 0x75, 0x62, 0x73, 0x75, 0x62, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x70, 0x75, 0x62, 0x73, 0x75, 0x62, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x52, 0x0a, 0x10, 0x50, 0x72, 0x65, 0x6d,
	0x69, 0x75, 0x6d, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x12, 0x25, 0x2e, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x70, 0x75, 0x62, 0x73, 0x75, 0x62, 0x2e, 0x70, 0x62, 0x2e,
	0x50, 0x72, 0x65, 0x6d, 0x69, 0x75, 0x6d, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x1a, 0x15, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x70, 0x75, 0x62,
	0x73, 0x75, 0x62, 0x2e, 0x70, 0x62, 0x2e, 0x41, 0x63, 0x6b, 0x22, 0x00, 0x12, 0x54, 0x0a, 0x12,
	0x50, 0x72, 0x65, 0x6d, 0x69, 0x75, 0x6d, 0x55, 0x6e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x62, 0x65, 0x12, 0x25, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x70, 0x75, 0x62, 0x73,
	0x75, 0x62, 0x2e, 0x70, 0x62, 0x2e, 0x50, 0x72, 0x65, 0x6d, 0x69, 0x75, 0x6d, 0x53, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x15, 0x2e, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x70, 0x75, 0x62, 0x73, 0x75, 0x62, 0x2e, 0x70, 0x62, 0x2e, 0x41, 0x63, 0x6b,
	0x22, 0x00, 0x12, 0x49, 0x0a, 0x0e, 0x50, 0x72, 0x65, 0x6d, 0x69, 0x75, 0x6d, 0x50, 0x75, 0x62,
	0x6c, 0x69, 0x73, 0x68, 0x12, 0x1e, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x70, 0x75,
	0x62, 0x73, 0x75, 0x62, 0x2e, 0x70, 0x62, 0x2e, 0x50, 0x72, 0x65, 0x6d, 0x69, 0x75, 0x6d, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x1a, 0x15, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x70, 0x75,
	0x62, 0x73, 0x75, 0x62, 0x2e, 0x70, 0x62, 0x2e, 0x41, 0x63, 0x6b, 0x22, 0x00, 0x12, 0x45, 0x0a,
	0x0b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x6c, 0x70, 0x12, 0x1d, 0x2e, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x70, 0x75, 0x62, 0x73, 0x75, 0x62, 0x2e, 0x70, 0x62, 0x2e,
	0x48, 0x65, 0x6c, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x70, 0x75, 0x62, 0x73, 0x75, 0x62, 0x2e, 0x70, 0x62, 0x2e, 0x41,
	0x63, 0x6b, 0x22, 0x00, 0x12, 0x4d, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65,
	0x53, 0x75, 0x62, 0x54, 0x6f, 0x48, 0x65, 0x6c, 0x70, 0x65, 0x72, 0x12, 0x1d, 0x2e, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x70, 0x75, 0x62, 0x73, 0x75, 0x62, 0x2e, 0x70, 0x62, 0x2e, 0x44,
	0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x53, 0x75, 0x62, 0x1a, 0x15, 0x2e, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x70, 0x75, 0x62, 0x73, 0x75, 0x62, 0x2e, 0x70, 0x62, 0x2e, 0x41, 0x63,
	0x6b, 0x22, 0x00, 0x42, 0x28, 0x5a, 0x26, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x70, 0x65, 0x64, 0x72, 0x6f, 0x61, 0x73, 0x74, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x70, 0x75, 0x62, 0x73, 0x75, 0x62, 0x2f, 0x70, 0x62, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_pb_scoutHub_proto_rawDescOnce sync.Once
	file_pb_scoutHub_proto_rawDescData = file_pb_scoutHub_proto_rawDesc
)

func file_pb_scoutHub_proto_rawDescGZIP() []byte {
	file_pb_scoutHub_proto_rawDescOnce.Do(func() {
		file_pb_scoutHub_proto_rawDescData = protoimpl.X.CompressGZIP(file_pb_scoutHub_proto_rawDescData)
	})
	return file_pb_scoutHub_proto_rawDescData
}

var file_pb_scoutHub_proto_msgTypes = make([]protoimpl.MessageInfo, 24)
var file_pb_scoutHub_proto_goTypes = []interface{}{
	(*Ack)(nil),                   // 0: contentpubsub.pb.Ack
	(*Subscription)(nil),          // 1: contentpubsub.pb.Subscription
	(*Event)(nil),                 // 2: contentpubsub.pb.Event
	(*EventID)(nil),               // 3: contentpubsub.pb.EventID
	(*Update)(nil),                // 4: contentpubsub.pb.Update
	(*RecruitTrackerMessage)(nil), // 5: contentpubsub.pb.RecruitTrackerMessage
	(*EventLog)(nil),              // 6: contentpubsub.pb.EventLog
	(*RefreshTracker)(nil),        // 7: contentpubsub.pb.RefreshTracker
	(*EventAck)(nil),              // 8: contentpubsub.pb.EventAck
	(*AdvertRequest)(nil),         // 9: contentpubsub.pb.AdvertRequest
	(*SearchRequest)(nil),         // 10: contentpubsub.pb.SearchRequest
	(*SearchReply)(nil),           // 11: contentpubsub.pb.SearchReply
	(*MulticastGroupID)(nil),      // 12: contentpubsub.pb.MulticastGroupID
	(*PremiumEvent)(nil),          // 13: contentpubsub.pb.PremiumEvent
	(*PremiumSubscription)(nil),   // 14: contentpubsub.pb.PremiumSubscription
	(*HelpRequest)(nil),           // 15: contentpubsub.pb.HelpRequest
	(*DelegateSub)(nil),           // 16: contentpubsub.pb.DelegateSub
	(*MinimalSubData)(nil),        // 17: contentpubsub.pb.MinimalSubData
	nil,                           // 18: contentpubsub.pb.Subscription.BackupsEntry
	nil,                           // 19: contentpubsub.pb.Update.BackupsEntry
	nil,                           // 20: contentpubsub.pb.EventLog.LogEntry
	nil,                           // 21: contentpubsub.pb.RefreshTracker.LogsEntry
	nil,                           // 22: contentpubsub.pb.SearchReply.GroupsEntry
	nil,                           // 23: contentpubsub.pb.HelpRequest.SubsEntry
}
var file_pb_scoutHub_proto_depIdxs = []int32{
	18, // 0: contentpubsub.pb.Subscription.backups:type_name -> contentpubsub.pb.Subscription.BackupsEntry
	3,  // 1: contentpubsub.pb.Event.eventID:type_name -> contentpubsub.pb.EventID
	19, // 2: contentpubsub.pb.Update.backups:type_name -> contentpubsub.pb.Update.BackupsEntry
	3,  // 3: contentpubsub.pb.EventLog.eventID:type_name -> contentpubsub.pb.EventID
	2,  // 4: contentpubsub.pb.EventLog.event:type_name -> contentpubsub.pb.Event
	20, // 5: contentpubsub.pb.EventLog.log:type_name -> contentpubsub.pb.EventLog.LogEntry
	5,  // 6: contentpubsub.pb.EventLog.recruitMessage:type_name -> contentpubsub.pb.RecruitTrackerMessage
	21, // 7: contentpubsub.pb.RefreshTracker.logs:type_name -> contentpubsub.pb.RefreshTracker.LogsEntry
	3,  // 8: contentpubsub.pb.EventAck.eventID:type_name -> contentpubsub.pb.EventID
	5,  // 9: contentpubsub.pb.EventAck.recruitMessage:type_name -> contentpubsub.pb.RecruitTrackerMessage
	12, // 10: contentpubsub.pb.AdvertRequest.groupID:type_name -> contentpubsub.pb.MulticastGroupID
	22, // 11: contentpubsub.pb.SearchReply.groups:type_name -> contentpubsub.pb.SearchReply.GroupsEntry
	12, // 12: contentpubsub.pb.PremiumEvent.groupID:type_name -> contentpubsub.pb.MulticastGroupID
	12, // 13: contentpubsub.pb.HelpRequest.groupID:type_name -> contentpubsub.pb.MulticastGroupID
	23, // 14: contentpubsub.pb.HelpRequest.subs:type_name -> contentpubsub.pb.HelpRequest.SubsEntry
	12, // 15: contentpubsub.pb.DelegateSub.groupID:type_name -> contentpubsub.pb.MulticastGroupID
	17, // 16: contentpubsub.pb.DelegateSub.sub:type_name -> contentpubsub.pb.MinimalSubData
	6,  // 17: contentpubsub.pb.RefreshTracker.LogsEntry.value:type_name -> contentpubsub.pb.EventLog
	12, // 18: contentpubsub.pb.SearchReply.GroupsEntry.value:type_name -> contentpubsub.pb.MulticastGroupID
	17, // 19: contentpubsub.pb.HelpRequest.SubsEntry.value:type_name -> contentpubsub.pb.MinimalSubData
	1,  // 20: contentpubsub.pb.ScoutHub.Subscribe:input_type -> contentpubsub.pb.Subscription
	2,  // 21: contentpubsub.pb.ScoutHub.Publish:input_type -> contentpubsub.pb.Event
	2,  // 22: contentpubsub.pb.ScoutHub.Notify:input_type -> contentpubsub.pb.Event
	4,  // 23: contentpubsub.pb.ScoutHub.UpdateBackup:input_type -> contentpubsub.pb.Update
	4,  // 24: contentpubsub.pb.ScoutHub.BackupRefresh:input_type -> contentpubsub.pb.Update
	6,  // 25: contentpubsub.pb.ScoutHub.LogToTracker:input_type -> contentpubsub.pb.EventLog
	8,  // 26: contentpubsub.pb.ScoutHub.AckToTracker:input_type -> contentpubsub.pb.EventAck
	5,  // 27: contentpubsub.pb.ScoutHub.TrackerRefresh:input_type -> contentpubsub.pb.RecruitTrackerMessage
	8,  // 28: contentpubsub.pb.ScoutHub.AckUp:input_type -> contentpubsub.pb.EventAck
	0,  // 29: contentpubsub.pb.ScoutHub.AckOp:input_type -> contentpubsub.pb.Ack
	2,  // 30: contentpubsub.pb.ScoutHub.HelpNewRv:input_type -> contentpubsub.pb.Event
	9,  // 31: contentpubsub.pb.ScoutHub.AdvertiseGroup:input_type -> contentpubsub.pb.AdvertRequest
	10, // 32: contentpubsub.pb.ScoutHub.GroupSearchRequest:input_type -> contentpubsub.pb.SearchRequest
	14, // 33: contentpubsub.pb.ScoutHub.PremiumSubscribe:input_type -> contentpubsub.pb.PremiumSubscription
	14, // 34: contentpubsub.pb.ScoutHub.PremiumUnsubscribe:input_type -> contentpubsub.pb.PremiumSubscription
	13, // 35: contentpubsub.pb.ScoutHub.PremiumPublish:input_type -> contentpubsub.pb.PremiumEvent
	15, // 36: contentpubsub.pb.ScoutHub.RequestHelp:input_type -> contentpubsub.pb.HelpRequest
	16, // 37: contentpubsub.pb.ScoutHub.DelegateSubToHelper:input_type -> contentpubsub.pb.DelegateSub
	0,  // 38: contentpubsub.pb.ScoutHub.Subscribe:output_type -> contentpubsub.pb.Ack
	0,  // 39: contentpubsub.pb.ScoutHub.Publish:output_type -> contentpubsub.pb.Ack
	0,  // 40: contentpubsub.pb.ScoutHub.Notify:output_type -> contentpubsub.pb.Ack
	0,  // 41: contentpubsub.pb.ScoutHub.UpdateBackup:output_type -> contentpubsub.pb.Ack
	0,  // 42: contentpubsub.pb.ScoutHub.BackupRefresh:output_type -> contentpubsub.pb.Ack
	0,  // 43: contentpubsub.pb.ScoutHub.LogToTracker:output_type -> contentpubsub.pb.Ack
	0,  // 44: contentpubsub.pb.ScoutHub.AckToTracker:output_type -> contentpubsub.pb.Ack
	0,  // 45: contentpubsub.pb.ScoutHub.TrackerRefresh:output_type -> contentpubsub.pb.Ack
	0,  // 46: contentpubsub.pb.ScoutHub.AckUp:output_type -> contentpubsub.pb.Ack
	0,  // 47: contentpubsub.pb.ScoutHub.AckOp:output_type -> contentpubsub.pb.Ack
	0,  // 48: contentpubsub.pb.ScoutHub.HelpNewRv:output_type -> contentpubsub.pb.Ack
	0,  // 49: contentpubsub.pb.ScoutHub.AdvertiseGroup:output_type -> contentpubsub.pb.Ack
	11, // 50: contentpubsub.pb.ScoutHub.GroupSearchRequest:output_type -> contentpubsub.pb.SearchReply
	0,  // 51: contentpubsub.pb.ScoutHub.PremiumSubscribe:output_type -> contentpubsub.pb.Ack
	0,  // 52: contentpubsub.pb.ScoutHub.PremiumUnsubscribe:output_type -> contentpubsub.pb.Ack
	0,  // 53: contentpubsub.pb.ScoutHub.PremiumPublish:output_type -> contentpubsub.pb.Ack
	0,  // 54: contentpubsub.pb.ScoutHub.RequestHelp:output_type -> contentpubsub.pb.Ack
	0,  // 55: contentpubsub.pb.ScoutHub.DelegateSubToHelper:output_type -> contentpubsub.pb.Ack
	38, // [38:56] is the sub-list for method output_type
	20, // [20:38] is the sub-list for method input_type
	20, // [20:20] is the sub-list for extension type_name
	20, // [20:20] is the sub-list for extension extendee
	0,  // [0:20] is the sub-list for field type_name
}

func init() { file_pb_scoutHub_proto_init() }
func file_pb_scoutHub_proto_init() {
	if File_pb_scoutHub_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_pb_scoutHub_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ack); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_scoutHub_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Subscription); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_scoutHub_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Event); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_scoutHub_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_scoutHub_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Update); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_scoutHub_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecruitTrackerMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_scoutHub_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventLog); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_scoutHub_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RefreshTracker); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_scoutHub_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventAck); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_scoutHub_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdvertRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_scoutHub_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_scoutHub_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_scoutHub_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MulticastGroupID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_scoutHub_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PremiumEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_scoutHub_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PremiumSubscription); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_scoutHub_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HelpRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_scoutHub_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelegateSub); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_scoutHub_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MinimalSubData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_pb_scoutHub_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   24,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_pb_scoutHub_proto_goTypes,
		DependencyIndexes: file_pb_scoutHub_proto_depIdxs,
		MessageInfos:      file_pb_scoutHub_proto_msgTypes,
	}.Build()
	File_pb_scoutHub_proto = out.File
	file_pb_scoutHub_proto_rawDesc = nil
	file_pb_scoutHub_proto_goTypes = nil
	file_pb_scoutHub_proto_depIdxs = nil
}
